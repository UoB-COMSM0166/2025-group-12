Index: docs/src/Main.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {Controller} from \"./controller/Controller.js\";\r\nimport {CanvasSize} from \"./CanvasSize.js\";\r\nimport {preloader} from \"./Preloader.js\";\r\n\r\nnew p5((p) => {\r\n\r\n    let controller;\r\n    let images;\r\n    p.preload = async () => { images = await preloader(p);};\r\n\r\n    p.setup = () => {\r\n        let canvasSize = CanvasSize.getSize();\r\n        p.createCanvas(canvasSize[0], canvasSize[1]);\r\n        controller = new Controller(images);\r\n        controller.setup(p);\r\n    };\r\n\r\n    p.mouseWheel = (event) => {\r\n        controller.scrollListener(event);\r\n    }\r\n\r\n    p.mouseClicked = () => {\r\n        controller.clickListener(p);\r\n    }\r\n    p.draw = () => {\r\n        p.background(100);\r\n        \r\n        // create play stage\r\n        controller.setPlayStage(p);\r\n\r\n        // when game state changes, load or save data accordingly\r\n        controller.setData(p, controller.gameState.getState());\r\n\r\n        // replace following tmp view handling later\r\n        controller.view(p);\r\n\r\n        // keep a copy of current state\r\n        controller.saveState = controller.gameState.getState();\r\n    };\r\n});\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/docs/src/Main.js b/docs/src/Main.js
--- a/docs/src/Main.js	(revision 8f6b6a837c5f932221cc75cd207dab133a00bdce)
+++ b/docs/src/Main.js	(date 1739563327109)
@@ -6,11 +6,18 @@
 
     let controller;
     let images;
+    let pauseMenu;
     p.preload = async () => { images = await preloader(p);};
 
     p.setup = () => {
         let canvasSize = CanvasSize.getSize();
         p.createCanvas(canvasSize[0], canvasSize[1]);
+        pauseMenu = p.createGraphics(canvasSize[0], canvasSize[1]);
+        pauseMenu.background(0, 0, 0, 0);
+        pauseMenu.fill(255);
+        pauseMenu.textSize(50);
+        pauseMenu.textAlign(p.CENTER, p.CENTER);
+        pauseMenu.text("PAUSE", canvasSize[0]/2, canvasSize[1]/2);
         controller = new Controller(images);
         controller.setup(p);
     };
@@ -23,8 +30,9 @@
         controller.clickListener(p);
     }
     p.draw = () => {
+
         p.background(100);
-        
+
         // create play stage
         controller.setPlayStage(p);
 
@@ -36,5 +44,10 @@
 
         // keep a copy of current state
         controller.saveState = controller.gameState.getState();
+
+        if(controller.gameState.paused){
+            p.filter(p.BLUR, 5);
+            p.image(pauseMenu, 0, 0);
+        }
     };
 });
Index: docs/src/model/GameState.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {Inventory} from \"./Inventory.js\";\r\n\r\nexport const stateCode = {\r\n    MENU: 1,\r\n    STANDBY: 2,\r\n    PLAY: 4,\r\n    FINISH: 8\r\n};\r\n\r\nexport const stageCode = {\r\n    NOSTAGE: 0,\r\n    STAGE1: 1,\r\n    STAGE2: 2,\r\n    STAGE3: 3,\r\n    STAGE4: 4,\r\n    STAGE5: 5\r\n}\r\n\r\nexport class GameState {\r\n    constructor(images) {\r\n        this.state = stateCode.MENU; // default\r\n        this.currentStage = stageCode.NOSTAGE; // no stage is selected\r\n        this.inventory = new Inventory();\r\n        this.images = images; // store images so all menus can retrieve\r\n        this.playerCanClick = true; // set this to false during end turn enemy activity\r\n    }\r\n\r\n    setState(newState) {\r\n        if (Object.values(stateCode).includes(newState)) {\r\n            console.log(`Game state changed to: ${Object.keys(stateCode).find(key => stateCode[key] === newState)}`);\r\n            this.state = newState;\r\n        } else {\r\n            console.error(\"Invalid state:\", newState);\r\n        }\r\n    }\r\n\r\n    getState() {\r\n        return this.state;\r\n    }\r\n\r\n    togglePlayerCanClick(){\r\n        this.playerCanClick = !this.playerCanClick;\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/docs/src/model/GameState.js b/docs/src/model/GameState.js
--- a/docs/src/model/GameState.js	(revision 8f6b6a837c5f932221cc75cd207dab133a00bdce)
+++ b/docs/src/model/GameState.js	(date 1739563217428)
@@ -23,6 +23,7 @@
         this.inventory = new Inventory();
         this.images = images; // store images so all menus can retrieve
         this.playerCanClick = true; // set this to false during end turn enemy activity
+        this.paused = false;
     }
 
     setState(newState) {
@@ -41,5 +42,9 @@
     togglePlayerCanClick(){
         this.playerCanClick = !this.playerCanClick;
     }
+
+    togglePaused(){
+        this.paused = !this.paused;
+    }
 }
 
Index: docs/src/Preloader.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>export function preloader(p5) {\r\n    const basePath =  window.location.hostname.includes(\"github.io\") ? \"./assets/images/\" : \"../assets/images/\";\r\n\r\n    let images = new Map();\r\n\r\n    images.set(\"leftarrow\", p5.loadImage(basePath + \"leftarrow.png\"));\r\n    images.set(\"rightarrow\", p5.loadImage(basePath + \"rightarrow.png\"));\r\n    images.set(\"ground\", p5.loadImage(basePath + \"ground.png\"));\r\n\r\n    images.set(\"Tree\", p5.loadImage(basePath + \"Tree.png\"));\r\n    images.set(\"Bush\", p5.loadImage(basePath + \"Bush.png\"));\r\n    images.set(\"Grass\", p5.loadImage(basePath + \"Grass.png\"));\r\n\r\n    images.set(\"Storm\", p5.loadImage(basePath + \"Storm.png\"));\r\n    images.set(\"Mob\", p5.loadImage(basePath + \"Mob.jpg\"));\r\n\r\n    return images;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/docs/src/Preloader.js b/docs/src/Preloader.js
--- a/docs/src/Preloader.js	(revision 8f6b6a837c5f932221cc75cd207dab133a00bdce)
+++ b/docs/src/Preloader.js	(date 1739558905542)
@@ -1,5 +1,5 @@
 export function preloader(p5) {
-    const basePath =  window.location.hostname.includes("github.io") ? "./assets/images/" : "../assets/images/";
+    const basePath =  window.location.hostname.includes("localhost") ? "/docs/assets/images/" : "./assets/images/";
 
     let images = new Map();
 
Index: docs/src/model/Menu.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Button } from \"../items/Button.js\";\r\nimport { stateCode } from \"./GameState.js\";\r\nimport { myutil } from \"../../lib/myutil.js\";\r\n\r\nexport class StartMenu {\r\n    constructor(gameState) {\r\n        this.gameState = gameState;\r\n        this.buttons = [];\r\n    }\r\n\r\n    setup(p5) {\r\n\r\n        let [buttonWidth, buttonHeight] = myutil.relative2absolute(0.15, 0.07);\r\n        let [buttonX, buttonY] = myutil.relative2absolute(0.5, 0.6);\r\n        let buttonInter = myutil.relative2absolute(0.1, 0.1)[1];\r\n\r\n        let newGameButton = new Button(buttonX - buttonWidth / 2, buttonY, buttonWidth, buttonHeight, \"New Game\");\r\n        newGameButton.onClick = () => this.gameState.setState(stateCode.STANDBY);\r\n\r\n        let loadGameButton = new Button(buttonX - buttonWidth / 2, buttonY + buttonInter, buttonWidth, buttonHeight, \"Load Game\");\r\n        loadGameButton.onClick = () => console.log(\"Load Game (placeholder)\");\r\n\r\n        this.buttons.push(newGameButton, loadGameButton);\r\n    }\r\n\r\n    handleClick(p5) {\r\n        for (let button of this.buttons) {\r\n            button.mouseClick(p5);\r\n        }\r\n    }\r\n\r\n    draw(p5) {\r\n        p5.background(50);\r\n        p5.fill(255);\r\n        p5.textSize(32);\r\n        p5.textAlign(p5.CENTER, p5.TOP);\r\n        let [textX, textY] = myutil.relative2absolute(0.5, 0.1);\r\n        p5.text(\"Start Menu\", textX, textY);\r\n\r\n        for (let button of this.buttons) {\r\n            button.draw(p5);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/docs/src/model/Menu.js b/docs/src/model/Menu.js
--- a/docs/src/model/Menu.js	(revision 8f6b6a837c5f932221cc75cd207dab133a00bdce)
+++ b/docs/src/model/Menu.js	(date 1739563769726)
@@ -29,6 +29,9 @@
         }
     }
 
+    handleKey() {
+
+    }
     draw(p5) {
         p5.background(50);
         p5.fill(255);
Index: docs/src/controller/Controller.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { stateCode, stageCode, GameState } from \"../model/GameState.js\";\r\nimport { StartMenu } from \"../model/Menu.js\";\r\nimport { StandbyMenu } from \"../model/Standby.js\";\r\nimport { Stage1PlayBoard } from \"../model/stages/Stage1.js\";\r\nimport { Stage2PlayBoard } from \"../model/stages/Stage2.js\";\r\n\r\nexport class Controller {\r\n    constructor(images) {\r\n        this.gameState = new GameState(images);\r\n\r\n        this.menus = {\r\n            [stateCode.MENU]: new StartMenu(this.gameState),\r\n            [stateCode.STANDBY]: new StandbyMenu(this.gameState),\r\n            [stateCode.PLAY]: null\r\n        };\r\n\r\n        this.saveState = stateCode.MENU; // default\r\n    }\r\n\r\n    setup(p5) {\r\n        for (let menu of Object.values(this.menus)) {\r\n            if (menu && menu.setup) {\r\n                menu.setup(p5);\r\n            }\r\n        }\r\n    }\r\n\r\n    clickListener(p5) {\r\n        if (this.gameState.playerCanClick === false) {\r\n            return;\r\n        }\r\n        let currentMenu = this.menus[this.gameState.getState()];\r\n        if (currentMenu && currentMenu.handleClick) {\r\n            currentMenu.handleClick(p5);\r\n        }\r\n    }\r\n\r\n    scrollListener(event) {\r\n        let currentMenu = this.menus[this.gameState.getState()];\r\n        if (currentMenu && currentMenu.handleScroll) {\r\n            currentMenu.handleScroll(event);\r\n        }\r\n    }\r\n\r\n    view(p5) {\r\n        let currentMenu = this.menus[this.gameState.getState()];\r\n        if (currentMenu && currentMenu.draw) {\r\n            currentMenu.draw(p5);\r\n        }\r\n    }\r\n\r\n    setPlayStage(p5){\r\n        if (this.gameState.getState() === stateCode.PLAY\r\n            && (this.menus[stateCode.PLAY] === null || this.menus[stateCode.PLAY].stageCode !== this.gameState.currentStage)) {\r\n            this.menus[stateCode.PLAY] = this.newGameStage(this.gameState.currentStage);\r\n            this.menus[stateCode.PLAY].setup(p5);\r\n        }\r\n    }\r\n\r\n    setData(p5, newState) {\r\n        // if PLAY is in enemy movement, only call enemy movement\r\n        if (newState === stateCode.PLAY && this.gameState.playerCanClick === false) {\r\n            this.menus[stateCode.PLAY].enemyMovements(p5);\r\n        }\r\n\r\n        // if we go to PLAY from STANDBY, save inventory then push stage items\r\n        if (this.saveState === stateCode.STANDBY && newState === stateCode.PLAY) {\r\n            this.menus[stateCode.PLAY].tmpInventoryItems = this.gameState.inventory.saveInventory();\r\n            this.menus[stateCode.PLAY].setStageInventory();\r\n        }\r\n\r\n        // if we quit PLAY to STANDBY, reset PlayBoard and inventory\r\n        if (this.saveState === stateCode.PLAY && newState === stateCode.STANDBY) {\r\n            // reset inventory\r\n            this.gameState.inventory.loadInventory(this.menus[stateCode.PLAY].tmpInventoryItems);\r\n            // reset board later, since it also clears tmp inventory items\r\n            this.menus[stateCode.PLAY].resetBoard();\r\n        }\r\n        // if a game stage is cleared, we shift from PLAY to FINISH, then go to STANDBY\r\n        // remove all seeds and keep the inventory.\r\n        if (newState === stateCode.FINISH) {\r\n            this.menus[stateCode.PLAY].resetBoard();\r\n            this.gameState.setState(stateCode.STANDBY);\r\n\r\n            // remove all seed? ------\r\n            // codes ......\r\n\r\n\r\n        }\r\n\r\n    }\r\n\r\n    newGameStage(newStage) {\r\n        if (newStage === stageCode.STAGE1) {\r\n            return new Stage1PlayBoard(this.gameState);\r\n        }\r\n        if (newStage === stageCode.STAGE2) {\r\n            return new Stage2PlayBoard(this.gameState);\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/docs/src/controller/Controller.js b/docs/src/controller/Controller.js
--- a/docs/src/controller/Controller.js	(revision 8f6b6a837c5f932221cc75cd207dab133a00bdce)
+++ b/docs/src/controller/Controller.js	(date 1739563733601)
@@ -3,6 +3,7 @@
 import { StandbyMenu } from "../model/Standby.js";
 import { Stage1PlayBoard } from "../model/stages/Stage1.js";
 import { Stage2PlayBoard } from "../model/stages/Stage2.js";
+import {InputHandler} from "./input.js";
 
 export class Controller {
     constructor(images) {
@@ -14,6 +15,8 @@
             [stateCode.PLAY]: null
         };
 
+        //key input
+        this.input = new InputHandler(this.gameState);
         this.saveState = stateCode.MENU; // default
     }
 
Index: docs/src/controller/input.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/docs/src/controller/input.js b/docs/src/controller/input.js
new file mode 100644
--- /dev/null	(date 1739563709762)
+++ b/docs/src/controller/input.js	(date 1739563709762)
@@ -0,0 +1,76 @@
+export class InputHandler {
+    constructor(gameState) {
+        this.gameState = gameState;
+        this.keys = [];
+        this.keyboradKeys = [];
+        this.gamepadKeys = [];
+        this.gamepad;
+        window.addEventListener('keydown', e => {
+            console.log(e.key);
+            if ((e.key === 'w' ||
+                e.key === 'a' ||
+                e.key === 's' ||
+                e.key === 'd' ||
+                e.key === 'Enter' ||
+                e.key === ' ' )
+                && this.keyboradKeys.indexOf(e.key) === -1){
+                this.keyboradKeys.push(e.key);
+            }else if(e.key === 'q'){
+                //
+            }
+            else if(e.key === 'Escape'){
+                //pause the game
+                this.gameState.togglePaused();
+                this.gameState.togglePlayerCanClick();
+            }
+        });
+        window.addEventListener('keyup', e => {
+            if  (e.key === 'w' ||
+                e.key === 'a' ||
+                e.key === 's' ||
+                e.key === 'd' ||
+                e.key === 'Enter' ||
+                e.key === ' ' ){
+                this.keyboradKeys.splice(this.keyboradKeys.indexOf(e.key), 1);
+            }
+        });
+
+        window.addEventListener('gamepadconnected',(e) =>{
+            this.gamepad = e.gamepad;
+        });
+
+        window.addEventListener('gamepaddisconnected', (e)=>{
+            this.gamepad = null;
+        });
+    }
+
+    updateGamepad() {
+        if (this.gamepad) {
+            const gamepads = navigator.getGamepads();
+            const gamepad = gamepads[this.gamepad.index];
+
+            if (gamepad) {
+                const axisX = gamepad.axes[0];
+
+                if (axisX > 0.5 && !this.gamepadKeys.includes('d') ) {
+                    this.gamepadKeys.push('d');
+                }
+                else if(axisX < -0.5 && !this.gamepadKeys.includes('a')){
+                    this.gamepadKeys.push('a');
+                } 
+                else if (Math.abs(axisX) < 0.5 && (this.gamepadKeys.includes('a') || this.gamepadKeys.includes('d'))) {
+                    this.gamepadKeys.splice(this.gamepadKeys.indexOf('a'), 1);
+                    this.gamepadKeys.splice(this.gamepadKeys.indexOf('d'), 1);
+                }
+
+                if(gamepad.buttons[0].pressed && !this.gamepadKeys.includes(' ')){
+                    this.gamepadKeys.push(' ');
+                }
+                else if(!gamepad.buttons[0].pressed && this.gamepadKeys.includes(' ')){
+                    this.gamepadKeys.splice(this.gamepadKeys.indexOf(' '), 1);
+                }
+            }
+        }
+        this.keys = [...new Set([...this.keyboradKeys, ...this.gamepadKeys])];
+    }
+}
\ No newline at end of file
